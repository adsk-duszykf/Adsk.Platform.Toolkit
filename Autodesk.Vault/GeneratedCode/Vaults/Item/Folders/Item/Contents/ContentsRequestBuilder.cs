// <auto-generated/>
#pragma warning disable CS0618
using Autodesk.Vault.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.Vault.Vaults.Item.Folders.Item.Contents
{
    /// <summary>
    /// Builds and executes requests for operations under \vaults\{-id}\folders\{id}\contents
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ContentsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Vaults.Item.Folders.Item.Contents.ContentsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ContentsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/vaults/{%2Did}/folders/{id}/contents{?cursorState*,limit*,option%5BextendedModels%5D*,option%5BincludeFolders%5D*,option%5BincludeItemEcoLinks%5D*,option%5BlatestOnly%5D*,option%5BpropDefIds%5D*,option%5BreleasedFilesOnly%5D*,option%5BreleasedItemsOnly%5D*,option%5BsearchContent%5D*,option%5BsearchSubFolders%5D*,q*,sort*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Vaults.Item.Folders.Item.Contents.ContentsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ContentsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/vaults/{%2Did}/folders/{id}/contents{?cursorState*,limit*,option%5BextendedModels%5D*,option%5BincludeFolders%5D*,option%5BincludeItemEcoLinks%5D*,option%5BlatestOnly%5D*,option%5BpropDefIds%5D*,option%5BreleasedFilesOnly%5D*,option%5BreleasedItemsOnly%5D*,option%5BsearchContent%5D*,option%5BsearchSubFolders%5D*,q*,sort*}", rawUrl)
        {
        }
        /// <summary>
        /// Get the folder objects and children under it with the given Id in the given vault with vaultId.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Models.EntityCollection"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.Vault.Models.ErrorResponse">When receiving a 401 status code</exception>
        /// <exception cref="global::Autodesk.Vault.Models.ErrorResponse">When receiving a 403 status code</exception>
        /// <exception cref="global::Autodesk.Vault.Models.ErrorResponse">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.Vault.Models.EntityCollection?> GetAsync(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.Item.Folders.Item.Contents.ContentsRequestBuilder.ContentsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.Vault.Models.EntityCollection> GetAsync(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.Item.Folders.Item.Contents.ContentsRequestBuilder.ContentsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Autodesk.Vault.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "403", global::Autodesk.Vault.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "404", global::Autodesk.Vault.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.Vault.Models.EntityCollection>(requestInfo, global::Autodesk.Vault.Models.EntityCollection.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get the folder objects and children under it with the given Id in the given vault with vaultId.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.Item.Folders.Item.Contents.ContentsRequestBuilder.ContentsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.Item.Folders.Item.Contents.ContentsRequestBuilder.ContentsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Vaults.Item.Folders.Item.Contents.ContentsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.Vault.Vaults.Item.Folders.Item.Contents.ContentsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.Vault.Vaults.Item.Folders.Item.Contents.ContentsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get the folder objects and children under it with the given Id in the given vault with vaultId.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ContentsRequestBuilderGetQueryParameters 
        {
            /// <summary>Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("cursorState")]
            public string? CursorState { get; set; }
#nullable restore
#else
            [QueryParameter("cursorState")]
            public string CursorState { get; set; }
#endif
            /// <summary>Specifies the number of results to return per page. Maximum limit is controlled by &quot;Page size conifguration&quot; settingwhich could be updated using ADMS (&quot;Global Setting&quot; -&gt; &quot;Page size conifguration&quot;).</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>``true``: The response will include additional detailed information for each entity. Examples include:- For folders (getFolders), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.- For file versions (getFileVersions), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.- For change orders (getChangeOrders), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.- For property definitions (getPropertyDefinitions), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.``false``: (Default) The response will include basic information for each entity.</summary>
            [QueryParameter("option%5BextendedModels%5D")]
            public bool? OptionextendedModels { get; set; }
            /// <summary>``true``: (Default) Include folders or folder links in the search result.``false``: Exclude folders or folder links in the search result.</summary>
            [QueryParameter("option%5BincludeFolders%5D")]
            public bool? OptionincludeFolders { get; set; }
            /// <summary>``true``: (Default) Include Item/Change-order Link in the search result.``false``: Exclude Item/Change-order Link in the search result.</summary>
            [QueryParameter("option%5BincludeItemEcoLinks%5D")]
            public bool? OptionincludeItemEcoLinks { get; set; }
            /// <summary>``true``: (Default) Include only the latest version.``false``: Include all versions.</summary>
            [QueryParameter("option%5BlatestOnly%5D")]
            public bool? OptionlatestOnly { get; set; }
            /// <summary>The properties that need to be returned. property ids separated by &apos;,&apos;, e.g. &apos;1,2,3&apos; &apos;all&apos; means return all properties.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("option%5BpropDefIds%5D")]
            public string? OptionpropDefIds { get; set; }
#nullable restore
#else
            [QueryParameter("option%5BpropDefIds%5D")]
            public string OptionpropDefIds { get; set; }
#endif
            /// <summary>``true``: Include only file/file links that are in consumable (released) state.``false``: (Default) Include all files/file links.</summary>
            [QueryParameter("option%5BreleasedFilesOnly%5D")]
            public bool? OptionreleasedFilesOnly { get; set; }
            /// <summary>``true``: Include only itemLink that are consumable state.``false``: (Default) Include all itemLink.</summary>
            [QueryParameter("option%5BreleasedItemsOnly%5D")]
            public bool? OptionreleasedItemsOnly { get; set; }
            /// <summary>``true``: Search query text within all properties or both in all properties and content.``false``: (Default) Search query text within all properties.</summary>
            [QueryParameter("option%5BsearchContent%5D")]
            public bool? OptionsearchContent { get; set; }
            /// <summary>``true``: Search query text within all sub folders.``false``: (Default) Do not search query text within all sub folders.</summary>
            [QueryParameter("option%5BsearchSubFolders%5D")]
            public bool? OptionsearchSubFolders { get; set; }
            /// <summary>The value to use for the search. Based on &apos;SearchContent&apos; option, this parameter will either search across all properties  or across all properties and content. Ex: q=Assembly, all objects that contain &apos;Assembly&apos; within their properties will be returned. </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("q")]
            public string? Q { get; set; }
#nullable restore
#else
            [QueryParameter("q")]
            public string Q { get; set; }
#endif
            /// <summary>Specifies sorting criteria for search results. Format: {propertyDefSysName} {sort-order} Accepted values for sort-order: asc, desc.  Ex: sort = Revision desc,Name asc</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string Sort { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ContentsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Autodesk.Vault.Vaults.Item.Folders.Item.Contents.ContentsRequestBuilder.ContentsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
