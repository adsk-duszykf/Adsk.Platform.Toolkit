// <auto-generated/>
#pragma warning disable CS0618
using Autodesk.Vault.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.Vault.Vaults.Item.FileVersions.Item.Content
{
    /// <summary>
    /// Builds and executes requests for operations under \vaults\{-id}\file-versions\{id}\content
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ContentRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ContentRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/vaults/{%2Did}/file-versions/{id}/content{?allowSync*,contentDisposition*,wmSrcFileVerId*,wmSrcItemVerId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ContentRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/vaults/{%2Did}/file-versions/{id}/content{?allowSync*,contentDisposition*,wmSrcFileVerId*,wmSrcItemVerId*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieve the content of a specific file version. Supports both full file download as well as partial content via range requests.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.Vault.Models.ErrorResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::Autodesk.Vault.Models.ErrorResponse">When receiving a 401 status code</exception>
        /// <exception cref="global::Autodesk.Vault.Models.ErrorResponse">When receiving a 403 status code</exception>
        /// <exception cref="global::Autodesk.Vault.Models.ErrorResponse">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> GetAsync(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder.ContentRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> GetAsync(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder.ContentRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Autodesk.Vault.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "401", global::Autodesk.Vault.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "403", global::Autodesk.Vault.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "404", global::Autodesk.Vault.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve metadata for a specific file version content without fetching the full content body
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> HeadAsync(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder.ContentRequestBuilderHeadQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> HeadAsync(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder.ContentRequestBuilderHeadQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToHeadRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve the content of a specific file version. Supports both full file download as well as partial content via range requests.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder.ContentRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder.ContentRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Retrieve metadata for a specific file version content without fetching the full content body
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToHeadRequestInformation(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder.ContentRequestBuilderHeadQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToHeadRequestInformation(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder.ContentRequestBuilderHeadQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.HEAD, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieve the content of a specific file version. Supports both full file download as well as partial content via range requests.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ContentRequestBuilderGetQueryParameters 
        {
            /// <summary>In a multi-site environment, this field tells if the file should be synched to the local site.``true``: File is not on the local site, it will be copied to the local site.``false``: (Default) File is not copied to the local site.</summary>
            [QueryParameter("allowSync")]
            public bool? AllowSync { get; set; }
            /// <summary>Specify the content disposition of the response header. Pass in &apos;inline&apos; to allow the file to be displayed inside the web page; &apos;attachment&apos; or null to save the file. Other values would be directly used as it is, but the behavior can&apos;t be guaranteed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("contentDisposition")]
            public string? ContentDisposition { get; set; }
#nullable restore
#else
            [QueryParameter("contentDisposition")]
            public string ContentDisposition { get; set; }
#endif
            /// <summary>When current file is a dwf associated to an Item, directly or as a CAD file&apos;s visualization attachment, to download its watermarked version, supply this File Version&apos;s id or its CAD File Version&apos;s id as the watermark source.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("wmSrcFileVerId")]
            public string? WmSrcFileVerId { get; set; }
#nullable restore
#else
            [QueryParameter("wmSrcFileVerId")]
            public string WmSrcFileVerId { get; set; }
#endif
            /// <summary>When current file is a dwf associated to an Item, to download its watermarked version, supply this Item Version&apos;s id as the watermark source.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("wmSrcItemVerId")]
            public string? WmSrcItemVerId { get; set; }
#nullable restore
#else
            [QueryParameter("wmSrcItemVerId")]
            public string WmSrcItemVerId { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ContentRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder.ContentRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Retrieve metadata for a specific file version content without fetching the full content body
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ContentRequestBuilderHeadQueryParameters 
        {
            /// <summary>In a multi-site environment, this field tells if the file should be synched to the local site.``true``: File is not on the local site, it will be copied to the local site.``false``: (Default) File is not copied to the local site.</summary>
            [QueryParameter("allowSync")]
            public bool? AllowSync { get; set; }
            /// <summary>Specify the content disposition of the response header. Pass in &apos;inline&apos; to allow the file to be displayed inside the web page; &apos;attachment&apos; or null to save the file. Other values would be directly used as it is, but the behavior can&apos;t be guaranteed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("contentDisposition")]
            public string? ContentDisposition { get; set; }
#nullable restore
#else
            [QueryParameter("contentDisposition")]
            public string ContentDisposition { get; set; }
#endif
            /// <summary>When current file is a dwf associated to an Item, directly or as a CAD file&apos;s visualization attachment, to download its watermarked version, supply this File Version&apos;s id or its CAD File Version&apos;s id as the watermark source.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("wmSrcFileVerId")]
            public string? WmSrcFileVerId { get; set; }
#nullable restore
#else
            [QueryParameter("wmSrcFileVerId")]
            public string WmSrcFileVerId { get; set; }
#endif
            /// <summary>When current file is a dwf associated to an Item, to download its watermarked version, supply this Item Version&apos;s id as the watermark source.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("wmSrcItemVerId")]
            public string? WmSrcItemVerId { get; set; }
#nullable restore
#else
            [QueryParameter("wmSrcItemVerId")]
            public string WmSrcItemVerId { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ContentRequestBuilderHeadRequestConfiguration : RequestConfiguration<global::Autodesk.Vault.Vaults.Item.FileVersions.Item.Content.ContentRequestBuilder.ContentRequestBuilderHeadQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
