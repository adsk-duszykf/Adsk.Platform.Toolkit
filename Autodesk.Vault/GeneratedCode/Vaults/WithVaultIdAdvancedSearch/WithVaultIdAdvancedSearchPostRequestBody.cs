// <auto-generated/>
#pragma warning disable CS0618
using Autodesk.Vault.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithVaultIdAdvancedSearchPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>EntityTypes to search. If null or empty value is passed, it will include results from all entity types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchPostRequestBody_entityTypesToSearch?>? EntityTypesToSearch { get; set; }
#nullable restore
#else
        public List<global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchPostRequestBody_entityTypesToSearch?> EntityTypesToSearch { get; set; }
#endif
        /// <summary>URL string array for the folder entities.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? FoldersToSearch { get; set; }
#nullable restore
#else
        public List<string> FoldersToSearch { get; set; }
#endif
        /// <summary>The search parameters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.Vault.Models.SearchCriteria>? SearchCriterias { get; set; }
#nullable restore
#else
        public List<global::Autodesk.Vault.Models.SearchCriteria> SearchCriterias { get; set; }
#endif
        /// <summary>The properties to sort on.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.Vault.Models.SortCriteria>? SortCriterias { get; set; }
#nullable restore
#else
        public List<global::Autodesk.Vault.Models.SortCriteria> SortCriterias { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchPostRequestBody"/> and sets the default values.
        /// </summary>
        public WithVaultIdAdvancedSearchPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "entityTypesToSearch", n => { EntityTypesToSearch = n.GetCollectionOfEnumValues<global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchPostRequestBody_entityTypesToSearch>()?.AsList(); } },
                { "foldersToSearch", n => { FoldersToSearch = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "searchCriterias", n => { SearchCriterias = n.GetCollectionOfObjectValues<global::Autodesk.Vault.Models.SearchCriteria>(global::Autodesk.Vault.Models.SearchCriteria.CreateFromDiscriminatorValue)?.AsList(); } },
                { "sortCriterias", n => { SortCriterias = n.GetCollectionOfObjectValues<global::Autodesk.Vault.Models.SortCriteria>(global::Autodesk.Vault.Models.SortCriteria.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfEnumValues<global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchPostRequestBody_entityTypesToSearch>("entityTypesToSearch", EntityTypesToSearch);
            writer.WriteCollectionOfPrimitiveValues<string>("foldersToSearch", FoldersToSearch);
            writer.WriteCollectionOfObjectValues<global::Autodesk.Vault.Models.SearchCriteria>("searchCriterias", SearchCriterias);
            writer.WriteCollectionOfObjectValues<global::Autodesk.Vault.Models.SortCriteria>("sortCriterias", SortCriterias);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
