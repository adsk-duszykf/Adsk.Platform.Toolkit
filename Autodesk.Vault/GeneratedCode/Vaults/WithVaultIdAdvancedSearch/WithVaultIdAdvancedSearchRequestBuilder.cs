// <auto-generated/>
#pragma warning disable CS0618
using Autodesk.Vault.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch
{
    /// <summary>
    /// Builds and executes requests for operations under \vaults\{vaultId}:advanced-search
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithVaultIdAdvancedSearchRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        /// <param name="vaultId">The unique identifier of a vault.</param>
        public WithVaultIdAdvancedSearchRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter, string vaultId = "") : base(requestAdapter, "{+baseurl}/vaults/{vaultId}:advanced-search{?cursorState*,limit*,option%5BextendedModels%5D*,option%5BlatestOnly%5D*,option%5BpropDefIds%5D*,option%5BreleasedFilesOnly%5D*,option%5BreleasedItemsOnly%5D*,option%5BsearchSubFolders%5D*}", pathParameters)
        {
            if (!string.IsNullOrWhiteSpace(vaultId)) PathParameters.Add("vaultId", vaultId);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithVaultIdAdvancedSearchRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/vaults/{vaultId}:advanced-search{?cursorState*,limit*,option%5BextendedModels%5D*,option%5BlatestOnly%5D*,option%5BpropDefIds%5D*,option%5BreleasedFilesOnly%5D*,option%5BreleasedItemsOnly%5D*,option%5BsearchSubFolders%5D*}", rawUrl)
        {
        }
        /// <summary>
        /// Advanced Search: Allows the user to search for entities within a specified vault. The search can be customized based on various parameters such as entity types (File, Folder, Item, ChangeOrder), specific folders, and search criteria. Users can also sort the results, limit the search to the latest or released files/items only, and decide whether to include subfolders or full models in the search. The &apos;vaultId&apos; is required in the path to identify the targeted Vault.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Models.EntityCollection"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.Vault.Models.ErrorResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::Autodesk.Vault.Models.ErrorResponse">When receiving a 401 status code</exception>
        /// <exception cref="global::Autodesk.Vault.Models.ErrorResponse">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.Vault.Models.EntityCollection?> PostAsync(global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchPostRequestBody body, Action<RequestConfiguration<global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchRequestBuilder.WithVaultIdAdvancedSearchRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.Vault.Models.EntityCollection> PostAsync(global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchPostRequestBody body, Action<RequestConfiguration<global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchRequestBuilder.WithVaultIdAdvancedSearchRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Autodesk.Vault.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "401", global::Autodesk.Vault.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "403", global::Autodesk.Vault.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.Vault.Models.EntityCollection>(requestInfo, global::Autodesk.Vault.Models.EntityCollection.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Advanced Search: Allows the user to search for entities within a specified vault. The search can be customized based on various parameters such as entity types (File, Folder, Item, ChangeOrder), specific folders, and search criteria. Users can also sort the results, limit the search to the latest or released files/items only, and decide whether to include subfolders or full models in the search. The &apos;vaultId&apos; is required in the path to identify the targeted Vault.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchPostRequestBody body, Action<RequestConfiguration<global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchRequestBuilder.WithVaultIdAdvancedSearchRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchPostRequestBody body, Action<RequestConfiguration<global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchRequestBuilder.WithVaultIdAdvancedSearchRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Advanced Search: Allows the user to search for entities within a specified vault. The search can be customized based on various parameters such as entity types (File, Folder, Item, ChangeOrder), specific folders, and search criteria. Users can also sort the results, limit the search to the latest or released files/items only, and decide whether to include subfolders or full models in the search. The &apos;vaultId&apos; is required in the path to identify the targeted Vault.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithVaultIdAdvancedSearchRequestBuilderPostQueryParameters 
        {
            /// <summary>Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("cursorState")]
            public string? CursorState { get; set; }
#nullable restore
#else
            [QueryParameter("cursorState")]
            public string CursorState { get; set; }
#endif
            /// <summary>Specifies the number of results to return per page. Maximum limit is controlled by &quot;Page size conifguration&quot; settingwhich could be updated using ADMS (&quot;Global Setting&quot; -&gt; &quot;Page size conifguration&quot;).</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>``true``: The response will include additional detailed information for each entity. Examples include:- For folders (getFolders), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.- For file versions (getFileVersions), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.- For change orders (getChangeOrders), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.- For property definitions (getPropertyDefinitions), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.``false``: (Default) The response will include basic information for each entity.</summary>
            [QueryParameter("option%5BextendedModels%5D")]
            public bool? OptionextendedModels { get; set; }
            /// <summary>``true``: (Default) Include only the latest version.``false``: Include all versions.</summary>
            [QueryParameter("option%5BlatestOnly%5D")]
            public bool? OptionlatestOnly { get; set; }
            /// <summary>The properties that need to be returned. property ids separated by &apos;,&apos;, e.g. &apos;1,2,3&apos; &apos;all&apos; means return all properties.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("option%5BpropDefIds%5D")]
            public string? OptionpropDefIds { get; set; }
#nullable restore
#else
            [QueryParameter("option%5BpropDefIds%5D")]
            public string OptionpropDefIds { get; set; }
#endif
            /// <summary>``true``: Include only versions that are consumable (released) state.``false``: (Default) Include all versions.</summary>
            [QueryParameter("option%5BreleasedFilesOnly%5D")]
            public bool? OptionreleasedFilesOnly { get; set; }
            /// <summary>``true``: Include only versions that are consumable (released) state.``false``: (Default) Include all versions.</summary>
            [QueryParameter("option%5BreleasedItemsOnly%5D")]
            public bool? OptionreleasedItemsOnly { get; set; }
            /// <summary>``true``: Search sub-folders of the folders specified in foldersToSearch in the request body.``false``: (Default) Do not search sub-folders of the folders specified in foldersToSearch in the request body.If no folders are specified in foldersToSearch in the request body, then this parameter will not have any effect.</summary>
            [QueryParameter("option%5BsearchSubFolders%5D")]
            public bool? OptionsearchSubFolders { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithVaultIdAdvancedSearchRequestBuilderPostRequestConfiguration : RequestConfiguration<global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchRequestBuilder.WithVaultIdAdvancedSearchRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
