// <auto-generated/>
#pragma warning disable CS0618
using Autodesk.Vault.Models;
using Autodesk.Vault.Vaults.Item;
using Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.Vault.Vaults
{
    /// <summary>
    /// Builds and executes requests for operations under \vaults
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class VaultsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Autodesk.Vault.vaults.item collection</summary>
        /// <param name="position">The unique identifier of a vault.</param>
        /// <returns>A <see cref="global::Autodesk.Vault.Vaults.Item.ItemRequestBuilder"/></returns>
        public global::Autodesk.Vault.Vaults.Item.ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("%2Did", position);
                return new global::Autodesk.Vault.Vaults.Item.ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Vaults.VaultsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public VaultsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/vaults{?cursorState*,limit*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Vaults.VaultsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public VaultsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/vaults{?cursorState*,limit*}", rawUrl)
        {
        }
        /// <summary>
        /// Get the list of all knowledge vaults on the server without logging in.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Models.VaultCollection"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.Vault.Models.VaultCollection?> GetAsync(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.VaultsRequestBuilder.VaultsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.Vault.Models.VaultCollection> GetAsync(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.VaultsRequestBuilder.VaultsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.Vault.Models.VaultCollection>(requestInfo, global::Autodesk.Vault.Models.VaultCollection.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get the list of all knowledge vaults on the server without logging in.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.VaultsRequestBuilder.VaultsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.Vault.Vaults.VaultsRequestBuilder.VaultsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Vaults.VaultsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.Vault.Vaults.VaultsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.Vault.Vaults.VaultsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Builds and executes requests for operations under \vaults\{vaultId}:advanced-search
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchRequestBuilder"/></returns>
        /// <param name="vaultId">The unique identifier of a vault.</param>
        public global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchRequestBuilder WithVaultIdAdvancedSearch(string vaultId)
        {
            if(string.IsNullOrEmpty(vaultId)) throw new ArgumentNullException(nameof(vaultId));
            return new global::Autodesk.Vault.Vaults.WithVaultIdAdvancedSearch.WithVaultIdAdvancedSearchRequestBuilder(PathParameters, RequestAdapter, vaultId);
        }
        /// <summary>
        /// Get the list of all knowledge vaults on the server without logging in.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class VaultsRequestBuilderGetQueryParameters 
        {
            /// <summary>Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("cursorState")]
            public string? CursorState { get; set; }
#nullable restore
#else
            [QueryParameter("cursorState")]
            public string CursorState { get; set; }
#endif
            /// <summary>Specifies the number of results to return per page. Maximum limit is controlled by &quot;Page size conifguration&quot; settingwhich could be updated using ADMS (&quot;Global Setting&quot; -&gt; &quot;Page size conifguration&quot;).</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class VaultsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Autodesk.Vault.Vaults.VaultsRequestBuilder.VaultsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
