// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.Vault.Models
{
    /// <summary>
    /// Profile attribute definition object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ProfileAttributeDefinition : IAdditionalDataHolder, IParsable
    {
        /// <summary>Active Directory field the attribute is mapped from (null if not mapped).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActiveDirectoryMapping { get; set; }
#nullable restore
#else
        public string ActiveDirectoryMapping { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The association type.</summary>
        public global::Autodesk.Vault.Models.ProfileAttributeDefinition_association? Association { get; set; }
        /// <summary>Name of the profile attribute (must be unique).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AttributeName { get; set; }
#nullable restore
#else
        public string AttributeName { get; set; }
#endif
        /// <summary>The profile attribute id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The systemName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SystemName { get; set; }
#nullable restore
#else
        public string SystemName { get; set; }
#endif
        /// <summary>The relative URL to access this object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Models.ProfileAttributeDefinition"/> and sets the default values.
        /// </summary>
        public ProfileAttributeDefinition()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Models.ProfileAttributeDefinition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.Vault.Models.ProfileAttributeDefinition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.Vault.Models.ProfileAttributeDefinition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activeDirectoryMapping", n => { ActiveDirectoryMapping = n.GetStringValue(); } },
                { "association", n => { Association = n.GetEnumValue<global::Autodesk.Vault.Models.ProfileAttributeDefinition_association>(); } },
                { "attributeName", n => { AttributeName = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "systemName", n => { SystemName = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("activeDirectoryMapping", ActiveDirectoryMapping);
            writer.WriteEnumValue<global::Autodesk.Vault.Models.ProfileAttributeDefinition_association>("association", Association);
            writer.WriteStringValue("attributeName", AttributeName);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("systemName", SystemName);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
