// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.Vault.Models
{
    /// <summary>
    /// The unique identifier for the object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ItemVersion : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Category assigned to the item </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Category { get; set; }
#nullable restore
#else
        public string Category { get; set; }
#endif
        /// <summary>The categoryColor property</summary>
        public double? CategoryColor { get; set; }
        /// <summary>The comment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comment { get; set; }
#nullable restore
#else
        public string Comment { get; set; }
#endif
        /// <summary>The entityType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntityType { get; set; }
#nullable restore
#else
        public string EntityType { get; set; }
#endif
        /// <summary>Item Iteration Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>If true, the logged-in user is restricted from seeing this item.</summary>
        public bool? IsCloaked { get; set; }
        /// <summary>Flag to check if an latest Item&apos;s  version is obsolete</summary>
        public bool? IsLatestObsolete { get; set; }
        /// <summary>The isReadOnly property</summary>
        public bool? IsReadOnly { get; set; }
        /// <summary>Item object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.Vault.Models.Item? Item { get; set; }
#nullable restore
#else
        public global::Autodesk.Vault.Models.Item Item { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The Item number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Number { get; set; }
#nullable restore
#else
        public string Number { get; set; }
#endif
        /// <summary>The properties property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.Vault.Models.Property>? Properties { get; set; }
#nullable restore
#else
        public List<global::Autodesk.Vault.Models.Property> Properties { get; set; }
#endif
        /// <summary>The display value for the revision.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Revision { get; set; }
#nullable restore
#else
        public string Revision { get; set; }
#endif
        /// <summary>Life cycle state of the item</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The stateColor property</summary>
        public double? StateColor { get; set; }
        /// <summary>The display title.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The relative URL to access this object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The version number, which is a sequential number given to each version. For example, if this value is 5, then the object is the 5th version.</summary>
        public double? Version { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Models.ItemVersion"/> and sets the default values.
        /// </summary>
        public ItemVersion()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Models.ItemVersion"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.Vault.Models.ItemVersion CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.Vault.Models.ItemVersion();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "category", n => { Category = n.GetStringValue(); } },
                { "categoryColor", n => { CategoryColor = n.GetDoubleValue(); } },
                { "comment", n => { Comment = n.GetStringValue(); } },
                { "entityType", n => { EntityType = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isCloaked", n => { IsCloaked = n.GetBoolValue(); } },
                { "isLatestObsolete", n => { IsLatestObsolete = n.GetBoolValue(); } },
                { "isReadOnly", n => { IsReadOnly = n.GetBoolValue(); } },
                { "item", n => { Item = n.GetObjectValue<global::Autodesk.Vault.Models.Item>(global::Autodesk.Vault.Models.Item.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "number", n => { Number = n.GetStringValue(); } },
                { "properties", n => { Properties = n.GetCollectionOfObjectValues<global::Autodesk.Vault.Models.Property>(global::Autodesk.Vault.Models.Property.CreateFromDiscriminatorValue)?.AsList(); } },
                { "revision", n => { Revision = n.GetStringValue(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "stateColor", n => { StateColor = n.GetDoubleValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "version", n => { Version = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("category", Category);
            writer.WriteDoubleValue("categoryColor", CategoryColor);
            writer.WriteStringValue("comment", Comment);
            writer.WriteStringValue("entityType", EntityType);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isCloaked", IsCloaked);
            writer.WriteBoolValue("isLatestObsolete", IsLatestObsolete);
            writer.WriteBoolValue("isReadOnly", IsReadOnly);
            writer.WriteObjectValue<global::Autodesk.Vault.Models.Item>("item", Item);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("number", Number);
            writer.WriteCollectionOfObjectValues<global::Autodesk.Vault.Models.Property>("properties", Properties);
            writer.WriteStringValue("revision", Revision);
            writer.WriteStringValue("state", State);
            writer.WriteDoubleValue("stateColor", StateColor);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("url", Url);
            writer.WriteDoubleValue("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
