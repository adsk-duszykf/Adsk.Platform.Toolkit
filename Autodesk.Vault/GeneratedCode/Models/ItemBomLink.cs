// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.Vault.Models
{
    /// <summary>
    /// A dependency between two Items 
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ItemBomLink : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Id of the BOM Component (only valid when BOM row is a component - not assigned an item) </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BomComponentId { get; set; }
#nullable restore
#else
        public string BomComponentId { get; set; }
#endif
        /// <summary>Item association&apos;s master Id (does not change between iterations) </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BomLinkMasterId { get; set; }
#nullable restore
#else
        public string BomLinkMasterId { get; set; }
#endif
        /// <summary>The order that the child entry shows up in the BOM.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BomOrder { get; set; }
#nullable restore
#else
        public string BomOrder { get; set; }
#endif
        /// <summary>Indicates if this BOM row is created and maintained by CAD data or is a manual BOM row </summary>
        public bool? Cad { get; set; }
        /// <summary>If true, the child Item has children of its own. If false, the child is a leaf.</summary>
        public bool? ChildHasChildren { get; set; }
        /// <summary>The ID of the child Item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChildItemId { get; set; }
#nullable restore
#else
        public string ChildItemId { get; set; }
#endif
        /// <summary>The childMasterAndRefDesMaster property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChildMasterAndRefDesMaster { get; set; }
#nullable restore
#else
        public string ChildMasterAndRefDesMaster { get; set; }
#endif
        /// <summary>Indicates if this BOM association is a grouped row of multiple BOM rows </summary>
        public bool? GroupedRow { get; set; }
        /// <summary>Id of the Multiple Row grouping </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GroupId { get; set; }
#nullable restore
#else
        public string GroupId { get; set; }
#endif
        /// <summary>The ID for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Indicates if this BOM row is included or excluded from the BOM </summary>
        public bool? Included { get; set; }
        /// <summary>Instance Count of this BOM association</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InstCount { get; set; }
#nullable restore
#else
        public string InstCount { get; set; }
#endif
        /// <summary>If true, the dependency is static. If false, the dependency is computed.</summary>
        public bool? IsStatic { get; set; }
        /// <summary>The ID of the parent Item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentItemId { get; set; }
#nullable restore
#else
        public string ParentItemId { get; set; }
#endif
        /// <summary>The parentMasterChildMasterAndRefDesMaster property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentMasterChildMasterAndRefDesMaster { get; set; }
#nullable restore
#else
        public string ParentMasterChildMasterAndRefDesMaster { get; set; }
#endif
        /// <summary>Assigned BOM row position number </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PositionNumber { get; set; }
#nullable restore
#else
        public string PositionNumber { get; set; }
#endif
        /// <summary>The properties property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.Vault.Models.Property>? Properties { get; set; }
#nullable restore
#else
        public List<global::Autodesk.Vault.Models.Property> Properties { get; set; }
#endif
        /// <summary>BOM row quantity </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Quantity { get; set; }
#nullable restore
#else
        public string Quantity { get; set; }
#endif
        /// <summary>The reference designator ID. This value will be 0 if reference designators are not available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RefDesId { get; set; }
#nullable restore
#else
        public string RefDesId { get; set; }
#endif
        /// <summary>The display name for the Unit of Measure on CldItemUsage.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Units { get; set; }
#nullable restore
#else
        public string Units { get; set; }
#endif
        /// <summary>The unit size for this BOM row </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitSize { get; set; }
#nullable restore
#else
        public string UnitSize { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Models.ItemBomLink"/> and sets the default values.
        /// </summary>
        public ItemBomLink()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Models.ItemBomLink"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.Vault.Models.ItemBomLink CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.Vault.Models.ItemBomLink();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bomComponentId", n => { BomComponentId = n.GetStringValue(); } },
                { "bomLinkMasterId", n => { BomLinkMasterId = n.GetStringValue(); } },
                { "bomOrder", n => { BomOrder = n.GetStringValue(); } },
                { "cad", n => { Cad = n.GetBoolValue(); } },
                { "childHasChildren", n => { ChildHasChildren = n.GetBoolValue(); } },
                { "childItemId", n => { ChildItemId = n.GetStringValue(); } },
                { "childMasterAndRefDesMaster", n => { ChildMasterAndRefDesMaster = n.GetStringValue(); } },
                { "groupId", n => { GroupId = n.GetStringValue(); } },
                { "groupedRow", n => { GroupedRow = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "included", n => { Included = n.GetBoolValue(); } },
                { "instCount", n => { InstCount = n.GetStringValue(); } },
                { "isStatic", n => { IsStatic = n.GetBoolValue(); } },
                { "parentItemId", n => { ParentItemId = n.GetStringValue(); } },
                { "parentMasterChildMasterAndRefDesMaster", n => { ParentMasterChildMasterAndRefDesMaster = n.GetStringValue(); } },
                { "positionNumber", n => { PositionNumber = n.GetStringValue(); } },
                { "properties", n => { Properties = n.GetCollectionOfObjectValues<global::Autodesk.Vault.Models.Property>(global::Autodesk.Vault.Models.Property.CreateFromDiscriminatorValue)?.AsList(); } },
                { "quantity", n => { Quantity = n.GetStringValue(); } },
                { "refDesId", n => { RefDesId = n.GetStringValue(); } },
                { "unitSize", n => { UnitSize = n.GetStringValue(); } },
                { "units", n => { Units = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bomComponentId", BomComponentId);
            writer.WriteStringValue("bomLinkMasterId", BomLinkMasterId);
            writer.WriteStringValue("bomOrder", BomOrder);
            writer.WriteBoolValue("cad", Cad);
            writer.WriteBoolValue("childHasChildren", ChildHasChildren);
            writer.WriteStringValue("childItemId", ChildItemId);
            writer.WriteStringValue("childMasterAndRefDesMaster", ChildMasterAndRefDesMaster);
            writer.WriteBoolValue("groupedRow", GroupedRow);
            writer.WriteStringValue("groupId", GroupId);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("included", Included);
            writer.WriteStringValue("instCount", InstCount);
            writer.WriteBoolValue("isStatic", IsStatic);
            writer.WriteStringValue("parentItemId", ParentItemId);
            writer.WriteStringValue("parentMasterChildMasterAndRefDesMaster", ParentMasterChildMasterAndRefDesMaster);
            writer.WriteStringValue("positionNumber", PositionNumber);
            writer.WriteCollectionOfObjectValues<global::Autodesk.Vault.Models.Property>("properties", Properties);
            writer.WriteStringValue("quantity", Quantity);
            writer.WriteStringValue("refDesId", RefDesId);
            writer.WriteStringValue("units", Units);
            writer.WriteStringValue("unitSize", UnitSize);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
