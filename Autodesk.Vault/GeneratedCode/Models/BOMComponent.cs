// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.Vault.Models
{
    /// <summary>
    /// BOM component object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BOMComponent : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A numeric value quantifying a single instance of the Component. For Components with discreet quantities, &quot;1&quot; should always be used. For measured quantities, a positive decimal value can be used. For example, a rod cut to 3.5 feet would have a BaseUOM of &quot;foot&quot; and a BaseQty of &quot;3.5&quot;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BaseQty { get; set; }
#nullable restore
#else
        public string BaseQty { get; set; }
#endif
        /// <summary>The Unit of Measure the Component is quantified with. For discreet quantities, &quot;Each&quot; should be used. For measured quantities, a length (inch, cm, foot, etc.) volume (ounce, ml, liter, quart, etc.) or mass (gram, pound, kg, etc.) unit of measure should be used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BaseUOM { get; set; }
#nullable restore
#else
        public string BaseUOM { get; set; }
#endif
        /// <summary>An enumerated value representing the BOMStructure value of Component:- ``Normal`` - 0,- ``Purchased`` - 1,- ``Inseperable`` - 2,- ``Phantom`` - 3,- ``Reference`` - 4,- ``DynamicPhantom`` - 5</summary>
        public global::Autodesk.Vault.Models.BOMStructureEnum? BOMStructure { get; set; }
        /// <summary>An enumerated value specifying the type of component.  Enum of Component Type:- ``Part`` - 0- ``Assembly`` - 1- ``Virtual`` - 2- ``Standard`` - 3- ``Purchased`` - 4- ``Document`` - 5</summary>
        public global::Autodesk.Vault.Models.ComponentTypeEnum? ComponentType { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Indicates if a BOM component is cloaked </summary>
        public bool? IsCloaked { get; set; }
        /// <summary>The name of this component.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Unique data within the scope of the design file used to identify the Component. For Inventor files, the GUID used to identify the Component is used (or GUID plus VirtualComponentDefinition._PropertySetsId for Virtual components). For DWG files, the HandleID associated with the Component is used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UniqueId { get; set; }
#nullable restore
#else
        public string UniqueId { get; set; }
#endif
        /// <summary>For Components with a XRefType of &quot;external&quot;, XRefID represents the FileID of the design file associated with that component. For &quot;internal&quot; Components, XRefID should be set to -1.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? XRefId { get; set; }
#nullable restore
#else
        public string XRefId { get; set; }
#endif
        /// <summary>An enumerated value that specifies whether the Component is internal or external in relation to the design file.Enum of XRefType  Internal = 0,  External = 1</summary>
        public global::Autodesk.Vault.Models.XRefTypeEnum? XRefType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Models.BOMComponent"/> and sets the default values.
        /// </summary>
        public BOMComponent()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Models.BOMComponent"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.Vault.Models.BOMComponent CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.Vault.Models.BOMComponent();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bOMStructure", n => { BOMStructure = n.GetEnumValue<global::Autodesk.Vault.Models.BOMStructureEnum>(); } },
                { "baseQty", n => { BaseQty = n.GetStringValue(); } },
                { "baseUOM", n => { BaseUOM = n.GetStringValue(); } },
                { "componentType", n => { ComponentType = n.GetEnumValue<global::Autodesk.Vault.Models.ComponentTypeEnum>(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isCloaked", n => { IsCloaked = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "uniqueId", n => { UniqueId = n.GetStringValue(); } },
                { "xRefId", n => { XRefId = n.GetStringValue(); } },
                { "xRefType", n => { XRefType = n.GetEnumValue<global::Autodesk.Vault.Models.XRefTypeEnum>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("baseQty", BaseQty);
            writer.WriteStringValue("baseUOM", BaseUOM);
            writer.WriteEnumValue<global::Autodesk.Vault.Models.BOMStructureEnum>("bOMStructure", BOMStructure);
            writer.WriteEnumValue<global::Autodesk.Vault.Models.ComponentTypeEnum>("componentType", ComponentType);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isCloaked", IsCloaked);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("uniqueId", UniqueId);
            writer.WriteStringValue("xRefId", XRefId);
            writer.WriteEnumValue<global::Autodesk.Vault.Models.XRefTypeEnum>("xRefType", XRefType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
