// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.Vault.Models
{
    /// <summary>
    /// A generic entity object with all supported fields.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Entity : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Category information  about this entity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Category { get; set; }
#nullable restore
#else
        public string Category { get; set; }
#endif
        /// <summary>Category color</summary>
        public double? CategoryColor { get; set; }
        /// <summary>The checkinDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CheckinDate { get; set; }
#nullable restore
#else
        public string CheckinDate { get; set; }
#endif
        /// <summary>The checkoutDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CheckoutDate { get; set; }
#nullable restore
#else
        public string CheckoutDate { get; set; }
#endif
        /// <summary>The checkoutUserName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CheckoutUserName { get; set; }
#nullable restore
#else
        public string CheckoutUserName { get; set; }
#endif
        /// <summary>The children property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Children { get; set; }
#nullable restore
#else
        public string Children { get; set; }
#endif
        /// <summary>Tells the date and time that this version of the entity was created in the Vault.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreateDate { get; set; }
#nullable restore
#else
        public string CreateDate { get; set; }
#endif
        /// <summary>The createUserName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreateUserName { get; set; }
#nullable restore
#else
        public string CreateUserName { get; set; }
#endif
        /// <summary>The entityType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntityType { get; set; }
#nullable restore
#else
        public string EntityType { get; set; }
#endif
        /// <summary>The file property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.Vault.Models.FileObject? File { get; set; }
#nullable restore
#else
        public global::Autodesk.Vault.Models.FileObject File { get; set; }
#endif
        /// <summary>The full vault path if Entity is a folder</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FullName { get; set; }
#nullable restore
#else
        public string FullName { get; set; }
#endif
        /// <summary>The hasVisualizationAttachment property</summary>
        public bool? HasVisualizationAttachment { get; set; }
        /// <summary>A unique identifier for the object</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The isCheckedOut property</summary>
        public bool? IsCheckedOut { get; set; }
        /// <summary>The isCloaked property</summary>
        public bool? IsCloaked { get; set; }
        /// <summary>The isLibrary property</summary>
        public bool? IsLibrary { get; set; }
        /// <summary>The isReadOnly property</summary>
        public bool? IsReadOnly { get; set; }
        /// <summary>Item object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.Vault.Models.Item? Item { get; set; }
#nullable restore
#else
        public global::Autodesk.Vault.Models.Item Item { get; set; }
#endif
        /// <summary>The lastModifiedDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastModifiedDate { get; set; }
#nullable restore
#else
        public string LastModifiedDate { get; set; }
#endif
        /// <summary>Name of the entity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The number property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Number { get; set; }
#nullable restore
#else
        public string Number { get; set; }
#endif
        /// <summary>folder object</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.Vault.Models.Folder? Parent { get; set; }
#nullable restore
#else
        public global::Autodesk.Vault.Models.Folder Parent { get; set; }
#endif
        /// <summary>The parentFolderId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentFolderId { get; set; }
#nullable restore
#else
        public string ParentFolderId { get; set; }
#endif
        /// <summary>The properties property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.Vault.Models.Property>? Properties { get; set; }
#nullable restore
#else
        public List<global::Autodesk.Vault.Models.Property> Properties { get; set; }
#endif
        /// <summary>Revision information about this entity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Revision { get; set; }
#nullable restore
#else
        public string Revision { get; set; }
#endif
        /// <summary>The size property</summary>
        public double? Size { get; set; }
        /// <summary>The name of the life cycle state for the entity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The color of the state.</summary>
        public double? StateColor { get; set; }
        /// <summary>The subfolderCount property</summary>
        public double? SubfolderCount { get; set; }
        /// <summary>The relative URL to access this object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>Version number if entity is an Iteration object</summary>
        public double? Version { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Models.Entity"/> and sets the default values.
        /// </summary>
        public Entity()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Models.Entity"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.Vault.Models.Entity CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.Vault.Models.Entity();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "category", n => { Category = n.GetStringValue(); } },
                { "categoryColor", n => { CategoryColor = n.GetDoubleValue(); } },
                { "checkinDate", n => { CheckinDate = n.GetStringValue(); } },
                { "checkoutDate", n => { CheckoutDate = n.GetStringValue(); } },
                { "checkoutUserName", n => { CheckoutUserName = n.GetStringValue(); } },
                { "children", n => { Children = n.GetStringValue(); } },
                { "createDate", n => { CreateDate = n.GetStringValue(); } },
                { "createUserName", n => { CreateUserName = n.GetStringValue(); } },
                { "entityType", n => { EntityType = n.GetStringValue(); } },
                { "file", n => { File = n.GetObjectValue<global::Autodesk.Vault.Models.FileObject>(global::Autodesk.Vault.Models.FileObject.CreateFromDiscriminatorValue); } },
                { "fullName", n => { FullName = n.GetStringValue(); } },
                { "hasVisualizationAttachment", n => { HasVisualizationAttachment = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isCheckedOut", n => { IsCheckedOut = n.GetBoolValue(); } },
                { "isCloaked", n => { IsCloaked = n.GetBoolValue(); } },
                { "isLibrary", n => { IsLibrary = n.GetBoolValue(); } },
                { "isReadOnly", n => { IsReadOnly = n.GetBoolValue(); } },
                { "item", n => { Item = n.GetObjectValue<global::Autodesk.Vault.Models.Item>(global::Autodesk.Vault.Models.Item.CreateFromDiscriminatorValue); } },
                { "lastModifiedDate", n => { LastModifiedDate = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "number", n => { Number = n.GetStringValue(); } },
                { "parent", n => { Parent = n.GetObjectValue<global::Autodesk.Vault.Models.Folder>(global::Autodesk.Vault.Models.Folder.CreateFromDiscriminatorValue); } },
                { "parentFolderId", n => { ParentFolderId = n.GetStringValue(); } },
                { "properties", n => { Properties = n.GetCollectionOfObjectValues<global::Autodesk.Vault.Models.Property>(global::Autodesk.Vault.Models.Property.CreateFromDiscriminatorValue)?.AsList(); } },
                { "revision", n => { Revision = n.GetStringValue(); } },
                { "size", n => { Size = n.GetDoubleValue(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "stateColor", n => { StateColor = n.GetDoubleValue(); } },
                { "subfolderCount", n => { SubfolderCount = n.GetDoubleValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "version", n => { Version = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("category", Category);
            writer.WriteDoubleValue("categoryColor", CategoryColor);
            writer.WriteStringValue("checkinDate", CheckinDate);
            writer.WriteStringValue("checkoutDate", CheckoutDate);
            writer.WriteStringValue("checkoutUserName", CheckoutUserName);
            writer.WriteStringValue("children", Children);
            writer.WriteStringValue("createDate", CreateDate);
            writer.WriteStringValue("createUserName", CreateUserName);
            writer.WriteStringValue("entityType", EntityType);
            writer.WriteObjectValue<global::Autodesk.Vault.Models.FileObject>("file", File);
            writer.WriteStringValue("fullName", FullName);
            writer.WriteBoolValue("hasVisualizationAttachment", HasVisualizationAttachment);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isCheckedOut", IsCheckedOut);
            writer.WriteBoolValue("isCloaked", IsCloaked);
            writer.WriteBoolValue("isLibrary", IsLibrary);
            writer.WriteBoolValue("isReadOnly", IsReadOnly);
            writer.WriteObjectValue<global::Autodesk.Vault.Models.Item>("item", Item);
            writer.WriteStringValue("lastModifiedDate", LastModifiedDate);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("number", Number);
            writer.WriteObjectValue<global::Autodesk.Vault.Models.Folder>("parent", Parent);
            writer.WriteStringValue("parentFolderId", ParentFolderId);
            writer.WriteCollectionOfObjectValues<global::Autodesk.Vault.Models.Property>("properties", Properties);
            writer.WriteStringValue("revision", Revision);
            writer.WriteDoubleValue("size", Size);
            writer.WriteStringValue("state", State);
            writer.WriteDoubleValue("stateColor", StateColor);
            writer.WriteDoubleValue("subfolderCount", SubfolderCount);
            writer.WriteStringValue("url", Url);
            writer.WriteDoubleValue("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
