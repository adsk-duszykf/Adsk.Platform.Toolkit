// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.Vault.Models
{
    /// <summary>
    /// change order object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ChangeOrder : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The date and time when the Change Order needs to be approved by.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApproveDeadline { get; set; }
#nullable restore
#else
        public string ApproveDeadline { get; set; }
#endif
        /// <summary>The closeDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CloseDate { get; set; }
#nullable restore
#else
        public string CloseDate { get; set; }
#endif
        /// <summary>The date and time the Change Order was created</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreateDate { get; set; }
#nullable restore
#else
        public string CreateDate { get; set; }
#endif
        /// <summary>The description of the Change Order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The entityType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntityType { get; set; }
#nullable restore
#else
        public string EntityType { get; set; }
#endif
        /// <summary>Master Id of this Change Order. The Master Id uniquely identifies this Change Order object </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Get if the Change Order is currently locked.</summary>
        public bool? IsReadOnly { get; set; }
        /// <summary>The last time that the Change Order was modified.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastModifiedDate { get; set; }
#nullable restore
#else
        public string LastModifiedDate { get; set; }
#endif
        /// <summary>The lastModifiedUserId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastModifiedUserId { get; set; }
#nullable restore
#else
        public string LastModifiedUserId { get; set; }
#endif
        /// <summary> the last time that the Change Order was modified.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastTouchedDate { get; set; }
#nullable restore
#else
        public string LastTouchedDate { get; set; }
#endif
        /// <summary>The descriptive name for this Change Order.The Change Order Number will be used here.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The Change Order number. Numbers are generated based on the Numbering Scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Number { get; set; }
#nullable restore
#else
        public string Number { get; set; }
#endif
        /// <summary>Number of File Attachments</summary>
        public double? NumberOfAttachments { get; set; }
        /// <summary>The properties property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.Vault.Models.Property>? Properties { get; set; }
#nullable restore
#else
        public List<global::Autodesk.Vault.Models.Property> Properties { get; set; }
#endif
        /// <summary>Get the name of the Change Order State.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The color of the state.</summary>
        public double? StateColor { get; set; }
        /// <summary>The title of the Change Order</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The relative URL to access this object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Models.ChangeOrder"/> and sets the default values.
        /// </summary>
        public ChangeOrder()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Models.ChangeOrder"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.Vault.Models.ChangeOrder CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.Vault.Models.ChangeOrder();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "approveDeadline", n => { ApproveDeadline = n.GetStringValue(); } },
                { "closeDate", n => { CloseDate = n.GetStringValue(); } },
                { "createDate", n => { CreateDate = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "entityType", n => { EntityType = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isReadOnly", n => { IsReadOnly = n.GetBoolValue(); } },
                { "lastModifiedDate", n => { LastModifiedDate = n.GetStringValue(); } },
                { "lastModifiedUserId", n => { LastModifiedUserId = n.GetStringValue(); } },
                { "lastTouchedDate", n => { LastTouchedDate = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "number", n => { Number = n.GetStringValue(); } },
                { "numberOfAttachments", n => { NumberOfAttachments = n.GetDoubleValue(); } },
                { "properties", n => { Properties = n.GetCollectionOfObjectValues<global::Autodesk.Vault.Models.Property>(global::Autodesk.Vault.Models.Property.CreateFromDiscriminatorValue)?.AsList(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "stateColor", n => { StateColor = n.GetDoubleValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("approveDeadline", ApproveDeadline);
            writer.WriteStringValue("closeDate", CloseDate);
            writer.WriteStringValue("createDate", CreateDate);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("entityType", EntityType);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isReadOnly", IsReadOnly);
            writer.WriteStringValue("lastModifiedDate", LastModifiedDate);
            writer.WriteStringValue("lastModifiedUserId", LastModifiedUserId);
            writer.WriteStringValue("lastTouchedDate", LastTouchedDate);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("number", Number);
            writer.WriteDoubleValue("numberOfAttachments", NumberOfAttachments);
            writer.WriteCollectionOfObjectValues<global::Autodesk.Vault.Models.Property>("properties", Properties);
            writer.WriteStringValue("state", State);
            writer.WriteDoubleValue("stateColor", StateColor);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
