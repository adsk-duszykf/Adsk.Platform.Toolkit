// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.Vault.Models
{
    /// <summary>
    /// Cursor-based pagination object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CursorBasedPagination : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates the current status of the indexing engine. This status helps users understand whether the indexing operation is complete or still in progress. This is particularly important for customers with large datasets, as indexing can take a considerable amount of time to complete.The statuses include:- ``IndexingComplete`` - All properties and content have been indexed.- ``IndexingProperties`` - File properties are currently being indexed.- ``IndexingContent`` - File content is currently being indexed.- ``NA`` - Not applicable as data not retrieved from index.Note: When the status is either &apos;IndexingProperties&apos; or &apos;IndexingContent&apos;, the search results are incomplete because the indexes are still being created. Complete search results will be available once fully indexed.</summary>
        public global::Autodesk.Vault.Models.IndexingStatus? IndexingStatus { get; set; }
        /// <summary>Limit requested for the current search</summary>
        public int? Limit { get; set; }
        /// <summary>Used to continue a search if the results are too large for a single call. Url has bookmark string embedded for subsequent calls on that search</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextUrl { get; set; }
#nullable restore
#else
        public string NextUrl { get; set; }
#endif
        /// <summary>Number of total hits. If this value is larger than the objects returned, then multiple searches will have to be performed to get the complete result set.</summary>
        public int? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Models.CursorBasedPagination"/> and sets the default values.
        /// </summary>
        public CursorBasedPagination()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Models.CursorBasedPagination"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.Vault.Models.CursorBasedPagination CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.Vault.Models.CursorBasedPagination();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "indexingStatus", n => { IndexingStatus = n.GetEnumValue<global::Autodesk.Vault.Models.IndexingStatus>(); } },
                { "limit", n => { Limit = n.GetIntValue(); } },
                { "nextUrl", n => { NextUrl = n.GetStringValue(); } },
                { "totalResults", n => { TotalResults = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Autodesk.Vault.Models.IndexingStatus>("indexingStatus", IndexingStatus);
            writer.WriteIntValue("limit", Limit);
            writer.WriteStringValue("nextUrl", NextUrl);
            writer.WriteIntValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
