// <auto-generated/>
#pragma warning disable CS0618
using Autodesk.Vault.Models;
using Autodesk.Vault.Roles.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.Vault.Roles
{
    /// <summary>
    /// Builds and executes requests for operations under \roles
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RolesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Autodesk.Vault.roles.item collection</summary>
        /// <param name="position">The unique identifier of a role.</param>
        /// <returns>A <see cref="global::Autodesk.Vault.Roles.Item.RolesItemRequestBuilder"/></returns>
        public global::Autodesk.Vault.Roles.Item.RolesItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Autodesk.Vault.Roles.Item.RolesItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Roles.RolesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RolesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/roles{?cursorState*,limit*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Vault.Roles.RolesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RolesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/roles{?cursorState*,limit*}", rawUrl)
        {
        }
        /// <summary>
        /// The returned list of roles depends on the permissions of the user passed in via BearerToken.If the user has AdminUserRead permission, all roles are returned.If not, only the roles that are assigned to the user are returned.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Models.RoleCollection"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.Vault.Models.ErrorResponse">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.Vault.Models.RoleCollection?> GetAsync(Action<RequestConfiguration<global::Autodesk.Vault.Roles.RolesRequestBuilder.RolesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.Vault.Models.RoleCollection> GetAsync(Action<RequestConfiguration<global::Autodesk.Vault.Roles.RolesRequestBuilder.RolesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Autodesk.Vault.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.Vault.Models.RoleCollection>(requestInfo, global::Autodesk.Vault.Models.RoleCollection.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// The returned list of roles depends on the permissions of the user passed in via BearerToken.If the user has AdminUserRead permission, all roles are returned.If not, only the roles that are assigned to the user are returned.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.Vault.Roles.RolesRequestBuilder.RolesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.Vault.Roles.RolesRequestBuilder.RolesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Vault.Roles.RolesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.Vault.Roles.RolesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.Vault.Roles.RolesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// The returned list of roles depends on the permissions of the user passed in via BearerToken.If the user has AdminUserRead permission, all roles are returned.If not, only the roles that are assigned to the user are returned.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RolesRequestBuilderGetQueryParameters 
        {
            /// <summary>Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("cursorState")]
            public string? CursorState { get; set; }
#nullable restore
#else
            [QueryParameter("cursorState")]
            public string CursorState { get; set; }
#endif
            /// <summary>Specifies the number of results to return per page. Maximum limit is controlled by &quot;Page size conifguration&quot; settingwhich could be updated using ADMS (&quot;Global Setting&quot; -&gt; &quot;Page size conifguration&quot;).</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RolesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Autodesk.Vault.Roles.RolesRequestBuilder.RolesRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
