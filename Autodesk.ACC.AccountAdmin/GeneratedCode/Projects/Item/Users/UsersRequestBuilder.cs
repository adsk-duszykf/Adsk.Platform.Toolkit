// <auto-generated/>
#pragma warning disable CS0618
using Autodesk.ACC.AccountAdmin.Models;
using Autodesk.ACC.AccountAdmin.Projects.Item.Users.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ACC.AccountAdmin.Projects.Item.Users
{
    /// <summary>
    /// Builds and executes requests for operations under \projects\{projectId}\users
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UsersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Autodesk.ACC.AccountAdmin.projects.item.users.item collection</summary>
        /// <param name="position">The ID of the user. You can use either the user ID (``id``) or the autodesk ID (``autodeskId``).</param>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.Item.WithUserItemRequestBuilder"/></returns>
        public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.Item.WithUserItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("userId", position);
                return new global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.Item.WithUserItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/projects/{projectId}/users{?fields*,filterTextMatch*,filter%5BaccessLevels%5D*,filter%5BautodeskId%5D*,filter%5BcompanyId%5D*,filter%5Bemail%5D*,filter%5Bid%5D*,filter%5BmemberGroupId%5D*,filter%5Bname%5D*,filter%5Bproducts%5D*,filter%5BroleId%5D*,filter%5BserviceNames%5D*,filter%5Bstatus%5D*,limit*,offset*,orFilters*,sort*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/projects/{projectId}/users{?fields*,filterTextMatch*,filter%5BaccessLevels%5D*,filter%5BautodeskId%5D*,filter%5BcompanyId%5D*,filter%5Bemail%5D*,filter%5Bid%5D*,filter%5BmemberGroupId%5D*,filter%5Bname%5D*,filter%5Bproducts%5D*,filter%5BroleId%5D*,filter%5BserviceNames%5D*,filter%5Bstatus%5D*,limit*,offset*,orFilters*,sort*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves information about all the users in a project. To get information about all the users in an account, see `GET accounts/users &lt;/en/docs/bim360/v1/reference/http/users-GET/&gt;`_.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.ValidationError">When receiving a 400 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Users401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 406 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.ValidationError">When receiving a 409 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 410 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersGetResponse?> GetAsUsersGetResponseAsync(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersGetResponse> GetAsUsersGetResponseAsync(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Autodesk.ACC.AccountAdmin.Models.ValidationError.CreateFromDiscriminatorValue },
                { "401", global::Autodesk.ACC.AccountAdmin.Models.Users401Error.CreateFromDiscriminatorValue },
                { "403", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "406", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "409", global::Autodesk.ACC.AccountAdmin.Models.ValidationError.CreateFromDiscriminatorValue },
                { "410", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "503", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersGetResponse>(requestInfo, global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves information about all the users in a project. To get information about all the users in an account, see `GET accounts/users &lt;/en/docs/bim360/v1/reference/http/users-GET/&gt;`_.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.ValidationError">When receiving a 400 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Users401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 406 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.ValidationError">When receiving a 409 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 410 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 503 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsUsersGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersResponse?> GetAsync(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersResponse> GetAsync(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Autodesk.ACC.AccountAdmin.Models.ValidationError.CreateFromDiscriminatorValue },
                { "401", global::Autodesk.ACC.AccountAdmin.Models.Users401Error.CreateFromDiscriminatorValue },
                { "403", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "406", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "409", global::Autodesk.ACC.AccountAdmin.Models.ValidationError.CreateFromDiscriminatorValue },
                { "410", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "503", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersResponse>(requestInfo, global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Private Use - Add a user to a project.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.ValidationError">When receiving a 400 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Users401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.ValidationError">When receiving a 409 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 410 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 412 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 415 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersPostResponse?> PostAsUsersPostResponseAsync(global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersPostResponse> PostAsUsersPostResponseAsync(global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Autodesk.ACC.AccountAdmin.Models.ValidationError.CreateFromDiscriminatorValue },
                { "401", global::Autodesk.ACC.AccountAdmin.Models.Users401Error.CreateFromDiscriminatorValue },
                { "403", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "409", global::Autodesk.ACC.AccountAdmin.Models.ValidationError.CreateFromDiscriminatorValue },
                { "410", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "412", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "415", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "503", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersPostResponse>(requestInfo, global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Private Use - Add a user to a project.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.ValidationError">When receiving a 400 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Users401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.ValidationError">When receiving a 409 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 410 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 412 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 415 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::Autodesk.ACC.AccountAdmin.Models.Error">When receiving a 503 status code</exception>
        [Obsolete("This method is obsolete. Use PostAsUsersPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersResponse?> PostAsync(global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersResponse> PostAsync(global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Autodesk.ACC.AccountAdmin.Models.ValidationError.CreateFromDiscriminatorValue },
                { "401", global::Autodesk.ACC.AccountAdmin.Models.Users401Error.CreateFromDiscriminatorValue },
                { "403", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "409", global::Autodesk.ACC.AccountAdmin.Models.ValidationError.CreateFromDiscriminatorValue },
                { "410", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "412", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "415", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
                { "503", global::Autodesk.ACC.AccountAdmin.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersResponse>(requestInfo, global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves information about all the users in a project. To get information about all the users in an account, see `GET accounts/users &lt;/en/docs/bim360/v1/reference/http/users-GET/&gt;`_.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Private Use - Add a user to a project.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves information about all the users in a project. To get information about all the users in an account, see `GET accounts/users &lt;/en/docs/bim360/v1/reference/http/users-GET/&gt;`_.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UsersRequestBuilderGetQueryParameters 
        {
            /// <summary>List of fields to return in the response.  Defaults to all fields.  Valid list of fields are `name`, `email`, `firstName`, `lastName`, `autodeskId`, `analyticsId`, `addressLine1`, `addressLine2`, `city`, `stateOrProvince`, `postalCode`, `country`, `imageUrl`, `phone`, `jobTitle`, `industry`, `aboutMe`, `companyId`, `accessLevels`, `roleIds`, `services`, `status`, `addedOn` and `products`.</summary>
            [Obsolete("This property is deprecated, use FieldsAsGetFieldsQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fields")]
            public string[]? Fields { get; set; }
#nullable restore
#else
            [QueryParameter("fields")]
            public string[] Fields { get; set; }
#endif
            /// <summary>List of fields to return in the response.  Defaults to all fields.  Valid list of fields are `name`, `email`, `firstName`, `lastName`, `autodeskId`, `analyticsId`, `addressLine1`, `addressLine2`, `city`, `stateOrProvince`, `postalCode`, `country`, `imageUrl`, `phone`, `jobTitle`, `industry`, `aboutMe`, `companyId`, `accessLevels`, `roleIds`, `services`, `status`, `addedOn` and `products`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fields")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetFieldsQueryParameterType[]? FieldsAsGetFieldsQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("fields")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetFieldsQueryParameterType[] FieldsAsGetFieldsQueryParameterType { get; set; }
#endif
            /// <summary>Filter project users by access level.  Possible values are ``accountAdmin``, ``projectAdmin`` and ``executive``.  For example ``filter[accessLevels]=accountAdmin,executive``.</summary>
            [Obsolete("This property is deprecated, use FilteraccessLevelsAsGetFilterAccessLevelsQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BaccessLevels%5D")]
            public string[]? FilteraccessLevels { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BaccessLevels%5D")]
            public string[] FilteraccessLevels { get; set; }
#endif
            /// <summary>Filter project users by access level.  Possible values are ``accountAdmin``, ``projectAdmin`` and ``executive``.  For example ``filter[accessLevels]=accountAdmin,executive``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BaccessLevels%5D")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetFilterAccessLevelsQueryParameterType[]? FilteraccessLevelsAsGetFilterAccessLevelsQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BaccessLevels%5D")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetFilterAccessLevelsQueryParameterType[] FilteraccessLevelsAsGetFilterAccessLevelsQueryParameterType { get; set; }
#endif
            /// <summary>Filter project users by one or several Autodesk ids.  For example ``filter[autodeskId]=LR3JVSFPDEAB, ...``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BautodeskId%5D")]
            public string[]? FilterautodeskId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BautodeskId%5D")]
            public string[] FilterautodeskId { get; set; }
#endif
            /// <summary>Filter project users by company id or `` for null values. For example ``filter[companyId]=003e1a66-6775-4045-b3cc-cf0e614ff7b5` or filter[companyId]=`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BcompanyId%5D")]
            public string? FiltercompanyId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BcompanyId%5D")]
            public string FiltercompanyId { get; set; }
#endif
            /// <summary>Filter project users by email.  Can be a partial match based on the value of `filterTextMatch` provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bemail%5D")]
            public string? Filteremail { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bemail%5D")]
            public string Filteremail { get; set; }
#endif
            /// <summary>Filter project users by one or several ids.  For example ``filter[id]=883e1a66-6775-4045-b3cc-cf0e614ff7b5, ..., ...``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bid%5D")]
            public Guid?[]? Filterid { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bid%5D")]
            public Guid?[] Filterid { get; set; }
#endif
            /// <summary>Filter project users who are members of the list of Autodesk groups.  For example ``filter[memberGroupId]=3456542``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BmemberGroupId%5D")]
            public string[]? FiltermemberGroupId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BmemberGroupId%5D")]
            public string[] FiltermemberGroupId { get; set; }
#endif
            /// <summary>Filter project users by name.  Can be a partial match based on the value of `filterTextMatch` provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bname%5D")]
            public string? Filtername { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bname%5D")]
            public string Filtername { get; set; }
#endif
            /// <summary>Filter resource by provided list of products.  Valid values are `assets`, `build`, `capitalPlanning`, `cost`, `costManagement`, `designCollaboration`, `docs`, `documentManagement`, `field`, `fieldManagement`, `financials`, `glue`,`workshopxr`, `insight`, `modelCoordination`, `plan`, `projectAdministration`, `projectManagement`, `quantification`, and `takeoff`.</summary>
            [Obsolete("This property is deprecated, use FilterproductsAsGetFilterProductsQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bproducts%5D")]
            public string[]? Filterproducts { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bproducts%5D")]
            public string[] Filterproducts { get; set; }
#endif
            /// <summary>Filter resource by provided list of products.  Valid values are `assets`, `build`, `capitalPlanning`, `cost`, `costManagement`, `designCollaboration`, `docs`, `documentManagement`, `field`, `fieldManagement`, `financials`, `glue`,`workshopxr`, `insight`, `modelCoordination`, `plan`, `projectAdministration`, `projectManagement`, `quantification`, and `takeoff`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bproducts%5D")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetFilterProductsQueryParameterType[]? FilterproductsAsGetFilterProductsQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bproducts%5D")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetFilterProductsQueryParameterType[] FilterproductsAsGetFilterProductsQueryParameterType { get; set; }
#endif
            /// <summary>Filter project users by role id.  For example ``filter[roleId]=883e1a66-6775-4045-b3cc-cf0e614ff7b5``.</summary>
            [QueryParameter("filter%5BroleId%5D")]
            public Guid? FilterroleId { get; set; }
            /// <summary>Filter project users by the services they have access to.  Valid values are ``costManagement``, ``designCollaboration``, ``documentManagement``, ``fieldManagement``, ``assets``,  ``workshopxr``,``insight``, ``modelCoordination``, ``projectAdministration``, ``projectManagement``, ``field``, ``glue`` and ``plan``.  For example ``filter[serviceNames]=glue,plan,sheets``.</summary>
            [Obsolete("This property is deprecated, use FilterserviceNamesAsGetFilterServiceNamesQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BserviceNames%5D")]
            public string[]? FilterserviceNames { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BserviceNames%5D")]
            public string[] FilterserviceNames { get; set; }
#endif
            /// <summary>Filter project users by the services they have access to.  Valid values are ``costManagement``, ``designCollaboration``, ``documentManagement``, ``fieldManagement``, ``assets``,  ``workshopxr``,``insight``, ``modelCoordination``, ``projectAdministration``, ``projectManagement``, ``field``, ``glue`` and ``plan``.  For example ``filter[serviceNames]=glue,plan,sheets``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BserviceNames%5D")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetFilterServiceNamesQueryParameterType[]? FilterserviceNamesAsGetFilterServiceNamesQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BserviceNames%5D")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetFilterServiceNamesQueryParameterType[] FilterserviceNamesAsGetFilterServiceNamesQueryParameterType { get; set; }
#endif
            /// <summary>Filter project users by their status.  Valid values are `active`, `pending`, `disabled` and `deleted`. Defaults to `active`, `pending` and `disabled`.</summary>
            [Obsolete("This property is deprecated, use FilterstatusAsGetFilterStatusQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bstatus%5D")]
            public string[]? Filterstatus { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bstatus%5D")]
            public string[] Filterstatus { get; set; }
#endif
            /// <summary>Filter project users by their status.  Valid values are `active`, `pending`, `disabled` and `deleted`. Defaults to `active`, `pending` and `disabled`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bstatus%5D")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetFilterStatusQueryParameterType[]? FilterstatusAsGetFilterStatusQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bstatus%5D")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetFilterStatusQueryParameterType[] FilterstatusAsGetFilterStatusQueryParameterType { get; set; }
#endif
            /// <summary>When filtering on a text based field this indicates how to do the matching.  Valid values are ``contains``, ``startsWith``, ``endsWith`` and ``equals``.  Default is ``contains``.</summary>
            [Obsolete("This property is deprecated, use FilterTextMatchAsGetFilterTextMatchQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filterTextMatch")]
            public string? FilterTextMatch { get; set; }
#nullable restore
#else
            [QueryParameter("filterTextMatch")]
            public string FilterTextMatch { get; set; }
#endif
            /// <summary>When filtering on a text based field this indicates how to do the matching.  Valid values are ``contains``, ``startsWith``, ``endsWith`` and ``equals``.  Default is ``contains``.</summary>
            [QueryParameter("filterTextMatch")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetFilterTextMatchQueryParameterType? FilterTextMatchAsGetFilterTextMatchQueryParameterType { get; set; }
            /// <summary>The maximum number of records to return in a single request. Possible range: 1-200. Default Can be a number between 1 and 200.  Default value: 20.  If a number greater than 200 is provided 200 will be returned.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>The number of records to skip before returning the result records.  Increase this value in subsequent requests to continue getting results when the number of records exceeds the requested limit.</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
            /// <summary>List of filtered fields to apply an &quot;or&quot; operator. Valid list of fields are `id`, `name`, `email`, `autodeskId`, `status` and `accessLevels`.</summary>
            [Obsolete("This property is deprecated, use OrFiltersAsGetOrFiltersQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("orFilters")]
            public string[]? OrFilters { get; set; }
#nullable restore
#else
            [QueryParameter("orFilters")]
            public string[] OrFilters { get; set; }
#endif
            /// <summary>List of filtered fields to apply an &quot;or&quot; operator. Valid list of fields are `id`, `name`, `email`, `autodeskId`, `status` and `accessLevels`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("orFilters")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetOrFiltersQueryParameterType[]? OrFiltersAsGetOrFiltersQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("orFilters")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetOrFiltersQueryParameterType[] OrFiltersAsGetOrFiltersQueryParameterType { get; set; }
#endif
            /// <summary>The list of fields to sort by.  When multiple fields are listed the later property is used to sort the resources where the previous fields have the same value. Each property can be followed by a direction modifier of either ascending (``asc``) or descending (``desc``).  Possible values: ``name``, ``email``, ``firstName``, ``lastName``, ``addressLine1``, ``addressLine2``, ``city``, ``stateOrProvince``, ``postalCode``, ``country`` and ``addedOn``.  Default sort is ``name``.</summary>
            [Obsolete("This property is deprecated, use SortAsGetSortQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string[]? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string[] Sort { get; set; }
#endif
            /// <summary>The list of fields to sort by.  When multiple fields are listed the later property is used to sort the resources where the previous fields have the same value. Each property can be followed by a direction modifier of either ascending (``asc``) or descending (``desc``).  Possible values: ``name``, ``email``, ``firstName``, ``lastName``, ``addressLine1``, ``addressLine2``, ``city``, ``stateOrProvince``, ``postalCode``, ``country`` and ``addedOn``.  Default sort is ``name``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetSortQueryParameterType[]? SortAsGetSortQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.GetSortQueryParameterType[] SortAsGetSortQueryParameterType { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UsersRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Projects.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UsersRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
