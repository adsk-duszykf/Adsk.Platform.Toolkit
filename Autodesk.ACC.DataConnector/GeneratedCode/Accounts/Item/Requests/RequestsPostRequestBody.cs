// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.DataConnector.Accounts.Item.Requests
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RequestsPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The callback URL for job completion notifications</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallbackUrl { get; set; }
#nullable restore
#else
        public string CallbackUrl { get; set; }
#endif
        /// <summary>Specifies the timeframe for extracting data in a scheduled request</summary>
        public global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody_dateRange? DateRange { get; set; }
        /// <summary>The user-entered description of this data request</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The date and time when a one-time job execution or a recurring interval schedule begins (ISO 8601)</summary>
        public DateTimeOffset? EffectiveFrom { get; set; }
        /// <summary>The date and time when the recurring interval schedule ends (ISO 8601)</summary>
        public DateTimeOffset? EffectiveTo { get; set; }
        /// <summary>The end date and time for the data extraction (ISO 8601)</summary>
        public DateTimeOffset? EndDate { get; set; }
        /// <summary>The data request&apos;s active/inactive status. Default is true</summary>
        public bool? IsActive { get; set; }
        /// <summary>(Legacy) A single project ID for the data request. Superseded by projectIdList</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectId { get; set; }
#nullable restore
#else
        public string ProjectId { get; set; }
#endif
        /// <summary>A list of up to 50 project IDs for the data request</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ProjectIdList { get; set; }
#nullable restore
#else
        public List<string> ProjectIdList { get; set; }
#endif
        /// <summary>The types of projects to be included in a request. Default is all</summary>
        public global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody_projectStatus? ProjectStatus { get; set; }
        /// <summary>The number of scheduleInterval units to wait between job execution</summary>
        public int? ReoccuringInterval { get; set; }
        /// <summary>The scheduling interval unit for jobs spawned by this data request</summary>
        public global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody_scheduleInterval? ScheduleInterval { get; set; }
        /// <summary>Send a notification email to the user upon job completion. Default is true</summary>
        public bool? SendEmail { get; set; }
        /// <summary>The service groups from which to extract data</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ServiceGroups { get; set; }
#nullable restore
#else
        public List<string> ServiceGroups { get; set; }
#endif
        /// <summary>The start date and time for the data extraction (ISO 8601)</summary>
        public DateTimeOffset? StartDate { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody"/> and sets the default values.
        /// </summary>
        public RequestsPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
            ProjectStatus = global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody_projectStatus.All;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "callbackUrl", n => { CallbackUrl = n.GetStringValue(); } },
                { "dateRange", n => { DateRange = n.GetEnumValue<global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody_dateRange>(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "effectiveFrom", n => { EffectiveFrom = n.GetDateTimeOffsetValue(); } },
                { "effectiveTo", n => { EffectiveTo = n.GetDateTimeOffsetValue(); } },
                { "endDate", n => { EndDate = n.GetDateTimeOffsetValue(); } },
                { "isActive", n => { IsActive = n.GetBoolValue(); } },
                { "projectId", n => { ProjectId = n.GetStringValue(); } },
                { "projectIdList", n => { ProjectIdList = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "projectStatus", n => { ProjectStatus = n.GetEnumValue<global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody_projectStatus>(); } },
                { "reoccuringInterval", n => { ReoccuringInterval = n.GetIntValue(); } },
                { "scheduleInterval", n => { ScheduleInterval = n.GetEnumValue<global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody_scheduleInterval>(); } },
                { "sendEmail", n => { SendEmail = n.GetBoolValue(); } },
                { "serviceGroups", n => { ServiceGroups = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "startDate", n => { StartDate = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("callbackUrl", CallbackUrl);
            writer.WriteEnumValue<global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody_dateRange>("dateRange", DateRange);
            writer.WriteStringValue("description", Description);
            writer.WriteDateTimeOffsetValue("effectiveFrom", EffectiveFrom);
            writer.WriteDateTimeOffsetValue("effectiveTo", EffectiveTo);
            writer.WriteDateTimeOffsetValue("endDate", EndDate);
            writer.WriteBoolValue("isActive", IsActive);
            writer.WriteStringValue("projectId", ProjectId);
            writer.WriteCollectionOfPrimitiveValues<string>("projectIdList", ProjectIdList);
            writer.WriteEnumValue<global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody_projectStatus>("projectStatus", ProjectStatus);
            writer.WriteIntValue("reoccuringInterval", ReoccuringInterval);
            writer.WriteEnumValue<global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody_scheduleInterval>("scheduleInterval", ScheduleInterval);
            writer.WriteBoolValue("sendEmail", SendEmail);
            writer.WriteCollectionOfPrimitiveValues<string>("serviceGroups", ServiceGroups);
            writer.WriteDateTimeOffsetValue("startDate", StartDate);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
