// <auto-generated/>
#pragma warning disable CS0618
using Autodesk.ACC.DataConnector.Accounts.Item.Requests.Item;
using Autodesk.ACC.DataConnector.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ACC.DataConnector.Accounts.Item.Requests
{
    /// <summary>
    /// Builds and executes requests for operations under \accounts\{accountId}\requests
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RequestsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Autodesk.ACC.DataConnector.accounts.item.requests.item collection</summary>
        /// <param name="position">The ID of the specified request</param>
        /// <returns>A <see cref="global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.Item.WithRequestItemRequestBuilder"/></returns>
        public global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.Item.WithRequestItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("requestId", position);
                return new global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.Item.WithRequestItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RequestsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{accountId}/requests{?filter%5BcreatedAt%5D*,filter%5BeffectiveFrom%5D*,filter%5BeffectiveTo%5D*,filter%5BendDate%5D*,filter%5BisActive%5D*,filter%5BprojectId%5D*,filter%5BreoccuringInterval%5D*,filter%5BscheduleInterval%5D*,filter%5BstartDate%5D*,filter%5BupdatedAt%5D*,limit*,offset*,sort*,sortFields*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RequestsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{accountId}/requests{?filter%5BcreatedAt%5D*,filter%5BeffectiveFrom%5D*,filter%5BeffectiveTo%5D*,filter%5BendDate%5D*,filter%5BisActive%5D*,filter%5BprojectId%5D*,filter%5BreoccuringInterval%5D*,filter%5BscheduleInterval%5D*,filter%5BstartDate%5D*,filter%5BupdatedAt%5D*,limit*,offset*,sort*,sortFields*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves a paginated list of data requests created by the authenticated user.Supports filtering, sorting, and pagination parameters.**Response Body**: Paginated array of data request objects
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsGetResponse?> GetAsync(Action<RequestConfiguration<global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsRequestBuilder.RequestsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsGetResponse> GetAsync(Action<RequestConfiguration<global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsRequestBuilder.RequestsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsGetResponse>(requestInfo, global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a new data request that defines parameters for data extraction including:- Account and project scope- Service groups to extract data from- Scheduling parameters for job execution- Optional callback URL for notifications**Request Body**: JSON object with data request configuration**Response Body**: Complete data request object with generated ID and metadata
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.DataConnector.Models.DataRequest"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.DataConnector.Models.DataRequest?> PostAsync(global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.DataConnector.Models.DataRequest> PostAsync(global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.DataConnector.Models.DataRequest>(requestInfo, global::Autodesk.ACC.DataConnector.Models.DataRequest.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves a paginated list of data requests created by the authenticated user.Supports filtering, sorting, and pagination parameters.**Response Body**: Paginated array of data request objects
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsRequestBuilder.RequestsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsRequestBuilder.RequestsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new data request that defines parameters for data extraction including:- Account and project scope- Service groups to extract data from- Scheduling parameters for job execution- Optional callback URL for notifications**Request Body**: JSON object with data request configuration**Response Body**: Complete data request object with generated ID and metadata
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.RequestsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves a paginated list of data requests created by the authenticated user.Supports filtering, sorting, and pagination parameters.**Response Body**: Paginated array of data request objects
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RequestsRequestBuilderGetQueryParameters 
        {
            /// <summary>Return only the data requests in which the specified field has the specified value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BcreatedAt%5D")]
            public string? FiltercreatedAt { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BcreatedAt%5D")]
            public string FiltercreatedAt { get; set; }
#endif
            /// <summary>Return only the data requests in which the specified field has the specified value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BeffectiveFrom%5D")]
            public string? FiltereffectiveFrom { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BeffectiveFrom%5D")]
            public string FiltereffectiveFrom { get; set; }
#endif
            /// <summary>Return only the data requests in which the specified field has the specified value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BeffectiveTo%5D")]
            public string? FiltereffectiveTo { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BeffectiveTo%5D")]
            public string FiltereffectiveTo { get; set; }
#endif
            /// <summary>Return only the data requests in which the specified field has the specified value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BendDate%5D")]
            public string? FilterendDate { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BendDate%5D")]
            public string FilterendDate { get; set; }
#endif
            /// <summary>Return only the data requests in which the specified field has the specified value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BisActive%5D")]
            public string? FilterisActive { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BisActive%5D")]
            public string FilterisActive { get; set; }
#endif
            /// <summary>Return only the data requests in which the specified field has the specified value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BprojectId%5D")]
            public string? FilterprojectId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BprojectId%5D")]
            public string FilterprojectId { get; set; }
#endif
            /// <summary>Return only the data requests in which the specified field has the specified value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BreoccuringInterval%5D")]
            public string? FilterreoccuringInterval { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BreoccuringInterval%5D")]
            public string FilterreoccuringInterval { get; set; }
#endif
            /// <summary>Return only the data requests in which the specified field has the specified value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BscheduleInterval%5D")]
            public string? FilterscheduleInterval { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BscheduleInterval%5D")]
            public string FilterscheduleInterval { get; set; }
#endif
            /// <summary>Return only the data requests in which the specified field has the specified value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BstartDate%5D")]
            public string? FilterstartDate { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BstartDate%5D")]
            public string FilterstartDate { get; set; }
#endif
            /// <summary>Return only the data requests in which the specified field has the specified value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BupdatedAt%5D")]
            public string? FilterupdatedAt { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BupdatedAt%5D")]
            public string FilterupdatedAt { get; set; }
#endif
            /// <summary>The number of data connector objects to return</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>The number of data objects to skip before starting to collect the result set</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
            /// <summary>The sort order of returned data connector objects</summary>
            [QueryParameter("sort")]
            public global::Autodesk.ACC.DataConnector.Accounts.Item.Requests.GetSortQueryParameterType? Sort { get; set; }
            /// <summary>A string of comma-separated names of the fields by which to sort the returned data requests</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortFields")]
            public string? SortFields { get; set; }
#nullable restore
#else
            [QueryParameter("sortFields")]
            public string SortFields { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
